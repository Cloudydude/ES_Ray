include ray_defines
include ray_glide
include ray_fixes
include ray_anim
include ray_cutscenes
include ray_mgz2boss
include ray_renderhooks
include ray_bluesphere
include ray_intro
include ray_super_palette
include ray_fallingsprites

global string Ray_Hud_Name
global bool Ray_Speed_Shoes

define u16 continueHUD.y = 185
define u16 continueHUD.x = 20

function void ExtraChar.startup_char2()
{
	global.characters = CHARS_TAILS_ALONE
}


function u32 getCharacterColorsForControllerLEDs(u8 character)
{
	return (character == CHARACTER_SONIC && global.xtrachar == 2 && levelselect.characters != 0) ? 0x00d8fc : base.getCharacterColorsForControllerLEDs(character)
}

function u64 getCharacterBonusTextIcon(u8 character)
{
	if (global.xtrachar == 2)
		return (Ray_hud_type == 0) ? "hud_bonus_icon_slot2" : "Nothing"
	else
		return base.getCharacterBonusTextIcon(character)
}

function u64 ExtraChar.getIconSpriteKey_char2(u8 type)
{

	if (type == 0x01)
		return  (Ray_hud_type == 1) ? "monitor_mania_Ray_life" : ((Ray_Sprite_type == 0) ? "monitor_icon_Mania_Ray" : "monitor_icon_S3_Ray")
	else if (type == 0x02 && System.getGlobalVariableValueByName("EggmanBlue.disableMonitorReplacement") != 1)
		return "monitor_icon_eggman"
	else if (type == 0x04)
		return (Ray_Speed_Shoes == 0) ? ((Ray_hud_type == 1) ? ((Ray_shoe_color == 0) ? "monitor_mania_Ray_shoe_red" : "monitor_mania_Ray_shoe") : "monitor_ray_shoe") : "monitor_icon_speedshoes"
	else
		return base.ExtraChar.getIconSpriteKey_char2(type)

	return 0
}

// Numbers for time, rings and everything
function void HUD.drawDigit(u8 digit, u16 px, u16 py, u16 renderQueue)
{
	if (global.xtrachar != 2 || Ray_hud_type == 0)
	{
		base.HUD.drawDigit(digit, px, py, renderQueue)
		return
	}
	Ray_Hud_Name = "_mania"
	Renderer.drawCustomSprite(stringformat("hud_digit_%d%s", digit, Ray_Hud_Name), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
}

// Numbers for lives
function void HUD.drawSmallDigit(u8 digit, u16 px, u16 py, u16 renderQueue)
{
	if (global.xtrachar != 2 || Ray_hud_type == 0)
	{
		base.HUD.drawSmallDigit(digit, px, py, renderQueue)
		return
	}
	Ray_Hud_Name = "_mania"
	Renderer.drawCustomSprite(stringformat("hud_smalldigit_%d%s", digit, Ray_Hud_Name), px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
}

//# address-hook(0x00db44) end(0x00dbb2)
function bool ExtraChar.renderHUD_char2()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return false
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			Ray_hud_type == 0
			HUD.drawSprite((Ray_hud_type == 0) ? "hud_text_score" : "hud_text_score_mania", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber((Ray_hud_type == 0) ? "hud_digit_%d" : "hud_digit_%d_mania", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue

			// Continue hud mod
			if (Renderer.hasCustomSprite("soniccont"))
			{
				u64 key = (Ray_Sprite_type == 0) ? "continue_icon_Ray_Mania_alt" : "continue_icon_Ray_S3_alt"

				if (Mods.isModActive("Continues HUD"))
				{
					Renderer.drawCustomSprite(key, baseX + continueHUD.x - 12, continueHUD.y + ((Ray_Sprite_type == 0) ? 12 : 11), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)

					if (continues_counter >= 10)
					{
						HUD.drawSmallDigit(u16((continues_counter / 10) % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x + 8, continueHUD.y, 0xe000)
					}
					else
						HUD.drawSmallDigit(u16(continues_counter % 10), baseX + continueHUD.x, continueHUD.y, 0xe000)
				}
				else if (Mods.isModActive("Continues HUD Extra"))
				{
					u16 continuetick = 0
					u16 continuemove = 0
					u16 continuemove.y = ((Ray_Sprite_type == 0) ? -11 : -13)
					while (continuetick < continues_counter)
					{
						Renderer.drawCustomSprite(key, baseX + continueHUD.x - 12 + continuemove, max(continueHUD.y - continuemove.y, 0), 0, SPRITE_FLAG_PRIO, 0xe000, 0,255)
						continuemove += 21
						++continuetick
						if (continuemove > 370)
						{
							continuemove = 0
							continuemove.y += 26
						}
					}
				}
			}

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite( (Ray_hud_type == 0) ? ((show ? "hud_text_time" : "hud_text_time_red")) : ((show ? "hud_text_time_mania" : "hud_text_time_red_mania")) , baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59

				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite((Ray_hud_type == 0) ? "hud_char_minutes" : "hud_char_minutes_mania", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite((Ray_hud_type == 0) ? "hud_char_seconds" : "hud_char_seconds_mania", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite((Ray_hud_type == 0) ? "hud_char_colon" : "hud_char_colon_mania", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}

		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite((Ray_hud_type == 0) ? ((show ? "hud_text_rings" : "hud_text_rings_red")) : ((show ? "hud_text_rings_mania" : "hud_text_rings_red_mania")), baseX, py, renderQueue)
			++renderQueue

			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 8
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200

			HUD.drawSprite(getCharacterLivesIcon(1), px, py, renderQueue)
			++renderQueue

			if (lives_counter < 100)
			{
				if (lives_counter >= 10)
					HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
				HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
			}
			else
			{
				if (lives_counter >= 100)
					HUD.drawSmallDigit(u16((lives_counter / 100) % 10), px + 0x20, py + 8, renderQueue)
				if (lives_counter >= 10)
					HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x28, py + 8, renderQueue)
				HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x30, py + 8, renderQueue)
			}
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00
		//  - 0x00dc00	-> D4.u16 = 0x02
		//  - 0x00dc32	-> D4.u16 = 0x04
		//  - 0x00dc96	-> D4.u16 = 0x08
		//  - 0x00dcb6	-> D4.u16 = 0x0a
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}

	//Because we want to disable the normal HUD, return true
	return true
}

// Custom Super/Hyper themes
// Requires this https://gamebanana.com/mods/54144

function u64 getTailsSuperTheme()
{
	if (global.xtrachar == 2)
		return "2c_sonic3"
	else
		return base.getTailsSuperTheme()
}

function u64 getTailsHyperTheme()
{
	if (global.xtrachar == 2)
		return "2e_proto"
	else
		return base.getTailsHyperTheme()
}

//@ Function taken from sonic3air_dev/scripts/menus/dataselect.lemon
function bool fn00d458()
{
    bool completedSlot = u8[A1] != 0x00 && u8[A1] != 0x80
    bool controlCheck = (control.pad1.pressed & CONTROL_DOWN) || (control.pad1.pressed & CONTROL_UP)

	if (Mods.isModActive("Extra Save Slots") && System.getGlobalVariableValueByName("ESS_save_entered") == 0)
	{
		return base.fn00d458()
	}
    
    if (u8[A0 + 0x05] == 0x02 && completedSlot && controlCheck)
    { // This makes it so that you don't see Ray's clear portrait in the zone icons while picking a level
		u32 backupA0 = A0
        D6 = 0x0c
        if (u8[A0 + 0x8a] != 0x01)
        {
            u16[A0 + 0x36] = 0x0d
            u8[A0 + 0x8a] = 0x01
        }
        
        // Zone select
        D1.u16 = u16[A0 + 0x36]
        if (control.pad1.pressed & CONTROL_DOWN)
        {
            playSound(0x5b)
            --D1.u16
            
            if (D1.s16 < 0x00)
                D1.u16 = D6.u16
        }
        else if (control.pad1.pressed & CONTROL_UP)
        {
            playSound(0x5b)
            ++D1.u16
            
            if (D1.u16 > D6.u16)
                D1 = 0x00
        }
        u16[A0 + 0x36] = D1.u16
        waitForNextFrame()
		DataSelect.drawCustomPlanes()

		A0 = backupA0
        
        // Return the Base function
        return base.fn00d458()
    }
    else 
    {
        // Return the Base function
        return base.fn00d458()
    }
}

function string MegamixHud.getCharName_ES2()
{
	return "Ray"
}

// Extra Save Slots background color
function s32 ESS_saveboxgetcolor_Es2()
{
	return 0x2448fc
}

function string ExtraChar.getCharacterName(u8 xtrachar)
{
	if (xtrachar == 2)
		return "Ray"
	
	if (global.game_mode == 0x8c)
	{
		if (global.characters == CHARS_SONIC_AND_TAILS && (Ray_Partner == 0x01 || Ray_Partner == 0x04))
			return "Sonic & Ray"
		else if ((useKnucklesAndTails || global.characters == CHARS_KNUCKLES_AND_TAILS) && (Ray_Partner == 0x02 || Ray_Partner == 0x04))
			return "Knuckles & Ray"
	}

	return base.ExtraChar.getCharacterName(xtrachar)
}

// The function forcibly updates the Discord RPC.
function bool ExtraChar.RPCManager.checkForceToUpdate()
{
	if (global.game_mode == 0x8c)
	{
		if (global.characters == CHARS_SONIC_AND_TAILS && (Ray_Partner == 0x01 || Ray_Partner == 0x04))
			return true
		else if ((useKnucklesAndTails || global.characters == CHARS_KNUCKLES_AND_TAILS) && (Ray_Partner == 0x02 || Ray_Partner == 0x04))
			return true
	}
	// Call the base function
	return base.ExtraChar.RPCManager.checkForceToUpdate()
}

function string RenderExtraCharIcon(u8 xtrachar)
{
	if (xtrachar == 2)
	{
		u64 names = (Ray_Sprite_type) ? "S3_Ray" : "Mania_Ray"
		return stringformat("level_select_S3C_%s", names)
	}
	return base.RenderExtraCharIcon(xtrachar)
}

// Sets the availability status of the character for selection in the Competition menu.
function bool ExtraChar.CompetitionMode.isCharacterAvailable(u8 xtrachar)
{
	// Ray's check
	if (xtrachar == 0x02)
		return true
	
	// Call the base function
	return base.ExtraChar.CompetitionMode.isCharacterAvailable(xtrachar)
}

function string getCharacterLivesIcon(u8 character)
{
	if (global.xtrachar == 0x02)
	{
		u64 characterName
		if (Ray_hud_type == 0)
			characterName = (Ray_Sprite_type == 0) ? "Mania_Ray" : "S3_Ray"
		else
			characterName = "rayMania"
		return stringformat("hud_lives_icon_%s", characterName)
	}
	return base.getCharacterLivesIcon(character)
}